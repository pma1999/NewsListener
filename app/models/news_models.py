from sqlalchemy import Column, Integer, String, Text, JSON, DateTime, ForeignKey, func, Boolean
from sqlalchemy.orm import relationship

from app.db.database import Base # Adjusted import path

class NewsDigestStatus:
    PENDING_SCRIPT = "PENDING_SCRIPT"
    PENDING_AUDIO = "PENDING_AUDIO"
    PROCESSING_AUDIO = "PROCESSING_AUDIO"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"

class NewsDigest(Base):
    __tablename__ = "news_digests"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    created_at = Column(DateTime, default=func.now(), nullable=False, server_default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, server_default=func.now())

    # Information about the source articles (e.g., list of URLs, titles, or topics)
    original_articles_info = Column(JSON, nullable=True) # Store as JSON list of dicts or similar

    # The script generated by the LLM for the podcast
    generated_script_text = Column(Text, nullable=True)

    # Status of the digest processing
    status = Column(String, default=NewsDigestStatus.PENDING_SCRIPT, nullable=False, index=True)
    error_message = Column(Text, nullable=True) # To store any errors during processing

    user = relationship("User", back_populates="news_digests")
    podcast_episode = relationship("PodcastEpisode", back_populates="news_digest", uselist=False, cascade="all, delete-orphan")

    def __repr__(self):
        return f"<NewsDigest(id={self.id}, user_id={self.user_id}, status='{self.status}')>"

class PodcastEpisode(Base):
    __tablename__ = "podcast_episodes"

    id = Column(Integer, primary_key=True, index=True)
    news_digest_id = Column(Integer, ForeignKey("news_digests.id", ondelete="CASCADE"), unique=True, nullable=False, index=True)

    # Relative URL to access the audio file, e.g., "/static/audio/some_unique_filename.mp3"
    audio_url = Column(String, nullable=True)
    # Absolute file path on the server for management (e.g., deletion)
    file_path = Column(String, nullable=True)

    language = Column(String(10), nullable=False, index=True)
    audio_style = Column(String(50), nullable=True, index=True)
    duration_seconds = Column(Integer, nullable=True) # Optional: store audio duration

    created_at = Column(DateTime, default=func.now(), nullable=False, server_default=func.now())

    news_digest = relationship("NewsDigest", back_populates="podcast_episode")

    def __repr__(self):
        return f"<PodcastEpisode(id={self.id}, news_digest_id={self.news_digest_id}, audio_url='{self.audio_url}')>" 